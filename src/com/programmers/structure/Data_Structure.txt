자료 구조

배열<Array>
- 배열은 선언할 때 크기가 고정됨
- 데이터 순차접근, 위치를 모르는 경우 효율성 떨어짐
- 배열 안 데이터 모두 동일한 자료형
- 중간에 값 추가하려면 기존 데이터 모두 이동시켜야 함

리스트<List>
배열과 비슷하지만 배열의 문제점을 해결하고 있음
- 데이터 크기 고정되지 않음
- 데이터가 서로 다른 타입일 수 있음
- 배열 중간에 값을 추가, 삭제하기 용이함

맵<Map>
데이터를 키:값 의 쌍으로 저장하는 방식
- 데이터를 저장할 때 해당 데이터를 찾기 위한 key 부여
- 키를 알면 언제든 쉽게 데이터 찾을 수 있음
- value 에 객체형이 들어갈 수 있어 복잡한 데이터 처리가 가능함

이터레이터<Iterator>
- 서로 다른 자료구조의 데이터를 동일한 방법으로 다음 데이터에 접근하는 방법을 제공하는 인터페이스


컬렉션 프레임워크
- 데이터를 저장하는 클래스들을 표준화한 설계 구조

Collection 인터페이스
- List와 Set 의 상위 인터페이스
컬렉션 객체 - java.util 패키지에 들어 있음
컬렉션 객체를 생성하는 방법은 참조변수 선언시 상위 인터페이스 타입을 사용하고 객체 생성은 필요에 따라 구체적인 클래스들을 사용하는 형식 입니다.
ex) List<String> list = new ArrayList<>(); -> 권장되는 방법


